I am building a Flutter package that provides authentication UI and Firebase authentication services following Clean Code and SOLID principles.

### **Project Concept:**
- The package provides reusable authentication UI and Firebase authentication.
- It does NOT include state management; it only uses callback functions.
- It should be modular, allowing easy customization.
- UI components (buttons, text fields) should be customizable and reusable.
- It should separate business logic from UI code.
- Error handling and validation should be centralized.

### **Required Code Improvements:**
1. **Apply SOLID Principles:**
   - Ensure Single Responsibility Principle (SRP) is followed.
   - Move Firebase authentication logic to `auth_service.dart`.
   - Ensure UI screens do not contain business logic.

2. **Modular File Structure:**
   - Move UI components to `components/` (Buttons, TextFields).
   - Move Firebase authentication logic to `services/`.
   - Centralize validation functions in `utils/validation.dart`.
   - Centralize error handling functions in `utils/error_handler.dart`.

3. **Code Readability & Clean Code Standards:**
   - Remove unnecessary `else` statements; prefer early returns.
   - Replace `print()` statements with a structured error-handling approach.
   - Ensure meaningful variable and function names.

4. **No State Management, Only Callbacks:**
   - `LoginScreen` and `RegisterScreen` should NOT manage state.
   - They should accept callback functions for authentication.

### **Final Task for Cursor AI:**
- Refactor the code according to the above rules.
- Ensure that all files follow Clean Code and SOLID principles.
- Remove any state management dependencies.
- Optimize error handling and validation functions.

Expected final project structure:

/ribra_tech_auth_template
  â”œâ”€â”€ lib/
  â”‚   â”œâ”€â”€ components/          # ðŸ“Œ UI BileÅŸenleri
  â”‚   â”‚   â”œâ”€â”€ custom_textfield.dart
  â”‚   â”‚   â”œâ”€â”€ custom_button.dart
  â”‚   â”œâ”€â”€ screens/             # ðŸ“Œ Authentication UI SayfalarÄ±
  â”‚   â”‚   â”œâ”€â”€ login_screen.dart
  â”‚   â”‚   â”œâ”€â”€ register_screen.dart
  â”‚   â”œâ”€â”€ utils/               # ðŸ“Œ YardÄ±mcÄ± Fonksiyonlar
  â”‚   â”‚   â”œâ”€â”€ validation.dart  # âœ… Validation iÅŸlemleri
  â”‚   â”‚   â”œâ”€â”€ error_handler.dart  # âœ… Hata yÃ¶netimi
  â”‚   â”œâ”€â”€ services/            # ðŸ“Œ Firebase Authentication Servisi
  â”‚   â”‚   â”œâ”€â”€ auth_service.dart
  â”‚   â”œâ”€â”€ ribra_tech_auth_template.dart  # ðŸ“Œ Ana giriÅŸ noktasÄ±

